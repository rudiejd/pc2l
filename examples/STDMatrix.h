// Copyright 2021 JD Rudie
#ifndef STD_MATRIX_H
#define STD_MATRIX_H

/** A simple, yet versatile 2-D STDMatrix class
 *
 */

#include <cassert>
#include <functional>
#include <iostream>
#include <vector>

/** Shortcut for the value of each element in the matrix */
using Val = double;

/** Short cut to a 2-d vector double values to streamline the code */
using TwoDVec = std::vector<std::vector<Val> >;

/** A matrix class to perform basic matrix operations.

    The class essentially encapsulates a 2-d matrix of double values
    and performs the following matrix operations:

    <ul>
    <li>Create a matrix of given dimensions.</li>

    <li>STDMatrix multiplication using Block matrix multiplication.</li>

    <li> Stream insertion and extraction operators to conveniently
    load and print values.</li>

    </ul>
*/
class STDMatrix : public TwoDVec
{
  /** Stream insertion operator to ease printing matrices
   *
   * This method prints the dimension of the matrix and then prints
   * the values in a row-by-row manner.  The output is setup to be
   * consistent with the stream extraction operator.
   *
   * \param[out] os The output stream to where the data is to be
   * written. This could be any output stream -- for example,
   * a std::ofstream, std::ostringstream, or std::cout.
   *
   * \param[in] matrix The matrix to be written.
   *
   * \return As per convention, this method returns the supplied
   * output stream.
   */
  friend std::ostream &operator<< (std::ostream &os, const STDMatrix &matrix);

  /** Stream extraction operator to ease reading matrices
   *
   * This method reads the dimension of the matrix and then reads
   * the values in a row-by-row manner.  The input is assumed to be
   * that one generated by the stream insertion operator.
   *
   * \param[in/out] in The input stream to where the data is to be
   * read. This could be any input stream -- for example,
   * a std::ifstream, std::istringstream, or std::cin.
   *
   * \param[in] matrix The matrix to be read.
   *
   * \return As per convention, this method returns the supplied
   * input stream.
   */
  friend std::istream &operator>> (std::istream &is, STDMatrix &matrix);

public:
  /**
   * Constructor to create and initialize a matrix.
   *
   * \param[in] rows The number of rows to be created in the
   * matrix.
   *
   * \param[in] cols The number of cols to be created in the matrix.
   *
   * \param[in] initVal The inital value to be set for each entry in
   * the matrix.
   */
  explicit STDMatrix (const size_t rows = 0, const size_t cols = 0,
                      const Val initVal = 0);

  /**
   * Returns the height or number of rows in this matrix.
   *
   * \return Returns the height or number of rows in this matrix.
   */
  size_t
  height () const
  {
    return size ();
  }

  /**
   * Returns the width or number of columns in this matrix.
   *
   * \return Returns the width or number of columns in this matrix.
   */
  size_t
  width () const
  {
    return (height () > 0) ? front ().size () : 0;
  }

  /**
   * Creates a new matrix in which each value is obtained by
   * applying a given unary operator to each entry in the matrix.
   *
   * \param[in] operation The unary operation to be used to create
   * the given matrix.
   */
  template <typename UnaryOp>
  STDMatrix
  apply (const UnaryOp &operation) const
  {
    STDMatrix ret (this->height (), this->width ());
    for (size_t row = 0; row < ret.height (); row++)
      {
        for (size_t col = 0; col < ret.width (); col++)
          {
            ret[row][col] = operation (this->at (row)[col]);
          }
      }
    return ret;
  }

  /**
   * Operator to add two matrices with the same dimensions together.
   *
   * \param[in] rhs The other matrix to be used.  This matrix must
   * have the same dimension as this matrix.  Otherwise this method
   * throws an excpetion.
   *
   * \return The resulting matrix in which each value has been
   * computed by adding the corresponding values from \c this and
   * rhs.
   */
  STDMatrix operator+ (const STDMatrix &rhs) const;

  /**
   * Operator for computing the Hadamard product of two matrices
   * with the same dimensions.
   *
   * \param[in] rhs The other matrix to be used.  This matrix must
   * have the same dimension as this matrix.  Otherwise this method
   * throws an excpetion.
   *
   * \return The resulting matrix in which each value has been
   * computed by multiplying the corresponding values from \c this
   * and rhs.
   */
  STDMatrix operator* (const STDMatrix &rhs) const;

  /**
   * Operator for computing the Hadamard product of two matrices
   * with the same dimensions.
   *
   * \param[in] rhs The other matrix to be used.  This matrix must
   * have the same dimension as this matrix.  Otherwise this method
   * throws an excpetion.
   *
   * \return The resulting matrix in which each value has been
   * computed by multiplying the corresponding values from \c this
   * and rhs.
   */
  STDMatrix operator* (const Val val) const;

  /**
   * Operator to subtract two matrices with the same dimensions.
   *
   * \param[in] rhs The other matrix to be used.  This matrix must
   * have the same dimension as this matrix.  Otherwise this method
   * throws an excpetion.
   *
   * \return The resulting matrix in which each value has been
   * computed by subtracting the corresponding values from \c this
   * and rhs.
   */
  STDMatrix operator- (const STDMatrix &rhs) const;

  /**
   * Performs the dot product of two matrices. This method has a
   * O(n^3) time complexity.
   *
   * \param[in] rhs The other matrix to be used.  This matrix must
   * have the same number of rows as the number of columns in this
   * matrix.  Otherwise this method throws an excpetion.
   *
   * \return The resulting matrix in which each value has been
   * computed by multiplying the corresponding values from \c this
   * and rhs.
   */
  STDMatrix dot (const STDMatrix &rhs) const;

  /**
   * Returns the transpose of this matrix.
   */
  STDMatrix transpose () const;
};

#endif